import { CreateCustomerParams, CreateBatchCustomerParams, CreateSubscriptionParams, ChangeSubscriptionParams, SubscriptionDetailsParams, CustomerDetailsParams, CustomerFeatureAccess, CustomerMetricAccessParams, ListAllSubscriptionsParams, CancelSubscriptionParams, GetInvoicesParams } from "./data-types";
declare class Lotus {
    private readonly host;
    private readonly apiKey;
    private readonly timeout;
    private readonly flushAt;
    private readonly flushInterval;
    private readonly headers;
    private queue;
    private readonly enable;
    private timer;
    private getRequestObject;
    private getRequestUrl;
    /**
     * Initialize a new `Lotus` with your Lotus organization's `apiKey` and an
     * optional dictionary of `options`.
     *
     * @param {String} apiKey
     * @param {Object} [options] (optional)
     *   @property {Number} flushAt (default: 20)
     *   @property {Number} flushInterval (default: 10000)
     *   @property {String} host (default: 'https://www.uselotus.app/')
     *   @property {Boolean} enable (default: true)
     */
    constructor(apiKey: any, options: any);
    /**
     * Add a `message` of type `type` to the queue and
     * check whether it should be flushed.
     *
     * @param params
     * @param {Function} [callback] (optional)
     * @api private
     */
    private enqueue;
    /**
     * Flush the current queue
     *
     * @param {Function} [callback] (optional)
     * @return {Lotus}
     */
    flush(callback?: any): any;
    /**
     * Send a trackEvent `message`.
     *
     * @param {Object} message (Should contain event name and customer id)
     * @param {Function} [callback] (optional)
     * @return {Lotus}
     */
    trackEvent(message: any, callback: any): this;
    /**
     * Get All Customers.
     *
     * @return {Object} (Array of customers)
     */
    getCustomers(): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get Customer Detail.
     *
     * @return {Object}
     * @param message
     */
    getCustomerDetail(message: CustomerDetailsParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create a new Customer.
     *  @return {Object}
     * @param params
     *
     */
    createCustomer(params: CreateCustomerParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create customer batch.
     * @return {Object}
     * @param params
     *
     */
    createCustomersBatch(params: CreateBatchCustomerParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Create a new Subscription.
     *  @return {Object}
     *  @param params
     *
     */
    createSubscription(params: CreateSubscriptionParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Delete a new Subscription.
     *  @return {Object}
     *  @param params
     *
     */
    cancelSubscription(params: CancelSubscriptionParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Change a Subscription.
     *
     * @param params
     *
     */
    changeSubscription(params: ChangeSubscriptionParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get all subscriptions.
     *
     */
    getAllSubscriptions(params: ListAllSubscriptionsParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get subscription details. subscription_id
     *
     * @param params
     *
     */
    getSubscriptionDetails(params: SubscriptionDetailsParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get All plans.
     *
     */
    getAllPlans(): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get customer feature access.
     *
     * @param params
     *
     */
    getCustomerFeatureAccess(params: CustomerFeatureAccess): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get customer access.
     *
     * @param params
     *
     */
    getCustomerMetricAccess(params: CustomerMetricAccessParams): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get invoices.
     *
     * @param params
     *
     */
    getInvoices(params: GetInvoicesParams): Promise<import("axios").AxiosResponse<any, any>>;
    _isErrorRetryable(error: any): boolean;
    private setRequestTimeout;
}
export { Lotus };
